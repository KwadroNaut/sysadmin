---

- name: Add Debian stable backports repository
  apt_repository: >
    state=present
    repo='deb http://httpredir.debian.org/debian {{ ansible_distribution_release }}-backports main'
  when: ansible_distribution == "Debian"

- name: Add certbot repository on Ubuntu
  apt_repository: >
    state=present
    repo='ppa:certbot/certbot'
  when: ansible_distribution == "Ubuntu"

- name: Install Letsencrypt certbot
  apt: >
    name=certbot
    state=latest
    update_cache=yes
  when: ansible_distribution == "Ubuntu"

- name: Install Letsencrypt certbot
  apt: >
    name=certbot
    state=latest
    default_release="{{ ansible_distribution_release }}-backports"
    update_cache=yes
  when: ansible_distribution == "Debian"

- name: Ensure certbot package default cronjob is removed
  file: >
    path=/etc/cron.d/certbot
    state=absent

- name: Creates Letsencrypt working/config directories
  file: >
    state=directory
    path={{ item }}
  with_items:
    - "{{ letsencrypt_workdir }}"
    - "{{ letsencrypt_confdir }}"

- name: Creates backend TLS dir
  file: >
    state=directory
    path="{{ bind_oonibackend_tls_dir }}"
  when: bind_oonibackend_tls_dir is defined

- name: Install nginx apt package
  apt: name=nginx
  when: ( ansible_distribution == "Debian" and letsencrypt_nginx is defined and letsencrypt_nginx|bool == true )

- name: Creates letsencrypt webroot
  file: >
    state=directory
    path="{{ letsencrypt_webroot }}"
  when: ( letsencrypt_nginx is defined and letsencrypt_nginx|bool == true )

- name: Template nginx virtualhost for letsencrypt acme requests
  template:
    src: letsencrypt-nginx.j2
    dest: /etc/nginx/sites-enabled/letsencrypt
  when: ( letsencrypt_nginx is defined and letsencrypt_nginx|bool == true )

- name: Remove default nginx virtual host config
  file:
    name: /etc/nginx/sites-enabled/default
    state: absent
  when: ( letsencrypt_nginx is defined and letsencrypt_nginx|bool == true )

- name: Restart nginx to activate letsencrypt virtualhost
  service: name=nginx state=restarted
  when: ( letsencrypt_nginx is defined and letsencrypt_nginx|bool == true )

- name: Generate Letsencrypt certificate with certbot package
  shell: "certbot {{ letsencrypt_certbot_cmd }}"

- name: Copy TLS specific backend files
  copy: >
    src="{{ item }}"
    dest="{{ bind_oonibackend_tls_dir }}"
    remote_src=True
  with_items:
    - "{{ letsencrypt_live_dir }}/privkey.pem"
    - "{{ letsencrypt_live_dir }}/fullchain.pem"
  when: bind_oonibackend_tls_dir is defined

- name: Force Letsencrypt certificate(s) renewal
  command: "{{ letsencrypt_renew_cmd }}"
  when: letsencrypt_force_renew is defined
