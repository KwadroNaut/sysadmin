#!/usr/bin/env python2

import argparse
import hashlib
import os
import re
import sys
import collections
import time
from cStringIO import StringIO

def parse_args():
    p = argparse.ArgumentParser(description='Merge live iptables-save dump with subset of chains from file',
                                epilog='Example: ip6tables-save -t filter | xtables-merge ipt.dump | ip6tables-restore')
    p.add_argument('stored', type=argparse.FileType('r'), help='Subset of chains to be merged into main dump')
    args = p.parse_args()
    return p.prog, args

def read_ipt(fd):
    it = enumerate(fd, 1)
    table = None
    policy = collections.OrderedDict()
    counter = {}
    chain = collections.OrderedDict()
    for lineno, line in it:
        if line[0] == '#' or line.strip() == '':
            pass
        elif line[0] == '*':
            if table:
                raise NotImplementedError('Can handle only single table per invocation', lineno, line)
            table = line
        elif line[0] == ':':
            chunks = line[1:].split(None, 2)
            ch, pol = chunks[:2]
            if pol not in ('ACCEPT', 'DROP', '-'):
                raise ValueError('Bad policy', lineno, line)
            if len(chunks) == 3:
                counter[ch] = chunks[2].rstrip()
            policy[ch] = pol
        elif line.startswith('-A '):
            ch = line.split(None, 2)[1]
            chain.setdefault(ch, []).append(line)
        elif line == 'COMMIT\n':
            break
        else:
            raise ValueError('Unexpected line', lineno, line)
    for lineno, line in it:
        if line[0] == '#' or line.strip() == '':
            pass
        elif line[0] == '*':
            raise NotImplementedError('Can handle only single table per invocation', lineno, line)
        else:
            raise ValueError('Unexpected line', lineno, line)
    for ch in chain:
        if ch not in policy:
            raise ValueError('Chain without policy', ch)
    for ch in policy:
        chain.setdefault(ch, [])
    return table, policy, counter, chain

def metaread(fd):
    name = fd.name
    st_mtime = os.fstat(fd.fileno()).st_mtime
    blob = fd.read()
    hexdigest = hashlib.sha256(blob).hexdigest()
    return StringIO(blob), name, st_mtime, hexdigest

def main():
    prog, args = parse_args()
    live_fd, live_name, live_mtime, live_hexdigest = metaread(sys.stdin)
    live_table, live_policy, live_counter, live_chain = read_ipt(live_fd)
    dump_fd, dump_name, dump_mtime, dump_hexdigest = metaread(args.stored)
    dump_table, dump_policy, dump_counter, dump_chain = read_ipt(dump_fd)
    now = int(time.time())
    if live_table != dump_table:
        raise ValueError('Can\'t merge different tables', live_table, dump_table)
    if len(dump_counter) > 0:
        raise ValueError('Can\'t use counters from stored file', dump_counter)
    live_policy.update(dump_policy)
    live_chain.update(dump_chain)
    sys.stdout.write(live_table)
    for ch, pol in live_policy.iteritems():
        if ch in live_counter:
            sys.stdout.write(':{} {} {}\n'.format(ch, pol, live_counter[ch]))
        else:
            sys.stdout.write(':{} {}\n'.format(ch, pol))
    for rules in live_chain.itervalues():
        for line in rules:
            sys.stdout.write(line)
    sys.stdout.write('COMMIT\n')
    live_mtime, dump_mtime = int(live_mtime), int(dump_mtime)
    sys.stdout.write(
        '# Generated by {} on {} ({}) from two sources:\n'
        '# live -- mtime: {} ({}), sha256: {}, name: {}\n'
        '# conf -- mtime: {} ({}), sha256: {}, name: {}\n'.format(
        prog, now, time.ctime(now),
        live_mtime, time.ctime(live_mtime), live_hexdigest, live_name,
        dump_mtime, time.ctime(dump_mtime), dump_hexdigest, dump_name,
    ))
    sys.stdout.flush()

if __name__ == '__main__':
    main()
